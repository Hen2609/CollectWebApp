<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<h1>סטטיסטיקה</h1>
<div style="display: flex;">\
    <article>
        <h1>מכירות מוצרים</h1>
        <div id="products-order-graph"></div>
    </article>
    <article>
        <h1>הוצאת כסף של משתמשים</h1>
        <div id="users-order-graph"></div>
    </article>
</div>
<script type="module">
    // set the dimensions and margins of the graph
    const width = 600
    const height = 600
    const margin = 40
    
    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    const radius = Math.min(width, height) / 2 - margin
    
    // append the svg object to the div called 'my_dataviz'
    const svg = d3.select("#products-order-graph")
      .append("svg")
        .attr("width", width)
        .attr("height", height)
      .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    const serverData = <%- JSON.stringify(data) %>;
      
    const data = Object.values(serverData.productOrders).reduce((res,product) => {
        res[product.product] = product.totalOrders
        return res;
    }, {})
    
    // set the color scale
    const color = d3.scaleOrdinal()
      .domain(data)
      .range(d3.schemeSet2);
    
    // Compute the position of each group on the pie:
    const pie = d3.pie()
      .value(function(d) {return d.value; })
    const data_ready = pie(d3.entries(data))
    // Now I know that group A goes from 0 degrees to x degrees and so on.
    
    // shape helper to build arcs:
    const arcGenerator = d3.arc()
      .innerRadius(0)
      .outerRadius(radius)
    
    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
    svg
      .selectAll('mySlices')
      .data(data_ready)
      .enter()
      .append('path')
        .attr('d', arcGenerator)
        .attr('fill', function(d){ return(color(d.data.key)) })
        .attr("stroke", "black")
        .style("stroke-width", "2px")
        .style("opacity", 0.7)
    
    // Now add the annotation. Use the centroid method to get the best coordinates
    svg
      .selectAll('mySlices')
      .data(data_ready)
      .enter()
      .append('text')
      .text(function(d){ return d.data.key})
      .attr("transform", function(d) { return "translate(" + arcGenerator.centroid(d) + ")";  })
      .style("text-anchor", "middle")
      .style("font-size", 17)
</script>
<script  type="module">
// set the dimensions and margins of the graph
const margin = {top: 30, right: 30, bottom: 70, left: 60};
const width = 600 - margin.left - margin.right;
const height = 600 - margin.top - margin.bottom;

const serverData = <%- JSON.stringify(usersOrders) %>


var svg = d3.select("#users-order-graph")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scaleBand()
    .range([0, width])
    .domain(serverData.map(function(d) { return d.userDetails.name; }))
    .padding(0.2);

svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x))
    .selectAll("text")
      .attr("transform", "translate(-10,30)rotate(-45)")
      .style("text-anchor", "end");

var y = d3.scaleLinear()
    .domain([0, d3.max(serverData, function(d) { return d.totalSpent; })])
    .range([height, 0]);

svg.append("g").call(d3.axisLeft(y));

svg.selectAll("mybar")
    .data(serverData)
    .enter()
    .append("rect")
    .attr("x", function(d) { return x(d.userDetails.name); })
    .attr("y", function(d) { return y(d.totalSpent); })
    .attr("width", x.bandwidth())
    .attr("height", function(d) { return height - y(d.totalSpent); })
    .attr("fill", "#69b3a2");

</script>